name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Unit Tests
  frontend-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend-unit
        name: frontend-unit-coverage

  # Backend Unit Tests
  backend-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.1, 8.2]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: unified_contractors_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, pdo_mysql
        coverage: xdebug
    
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      working-directory: backend
    
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader
      working-directory: backend
    
    - name: Copy environment file
      run: cp .env.testing .env
      working-directory: backend
    
    - name: Generate application key
      run: php artisan key:generate
      working-directory: backend
    
    - name: Run database migrations
      run: php artisan migrate --force
      working-directory: backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: localhost
        DB_PORT: 3306
        DB_DATABASE: unified_contractors_test
        DB_USERNAME: root
        DB_PASSWORD: password
    
    - name: Run backend unit tests
      run: php artisan test --testsuite=Unit --coverage-clover=coverage.xml
      working-directory: backend
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-unit
        name: backend-unit-coverage

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: unified_contractors_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, pdo_mysql
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader
      working-directory: backend
    
    - name: Setup backend environment
      run: |
        cp .env.testing .env
        php artisan key:generate
        php artisan migrate --force
      working-directory: backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: localhost
        DB_PORT: 3306
        DB_DATABASE: unified_contractors_test
        DB_USERNAME: root
        DB_PASSWORD: password
    
    - name: Start backend server
      run: php artisan serve --port=8080 &
      working-directory: backend
    
    - name: Wait for backend server
      run: npx wait-on http://localhost:8080 --timeout 60000
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        API_BASE_URL: http://localhost:8080/api
    
    - name: Run backend feature tests
      run: php artisan test --testsuite=Feature
      working-directory: backend

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: unified_contractors_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, pdo_mysql
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader
      working-directory: backend
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Setup backend environment
      run: |
        cp .env.testing .env
        php artisan key:generate
        php artisan migrate --force
        php artisan db:seed --class=TestSeeder
      working-directory: backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: localhost
        DB_PORT: 3306
        DB_DATABASE: unified_contractors_test
        DB_USERNAME: root
        DB_PASSWORD: password
    
    - name: Start backend server
      run: php artisan serve --port=8080 &
      working-directory: backend
    
    - name: Build frontend
      run: npm run build
    
    - name: Start frontend server
      run: npm run preview -- --port 5173 &
    
    - name: Wait for servers
      run: |
        npx wait-on http://localhost:8080 --timeout 60000
        npx wait-on http://localhost:5173 --timeout 60000
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:5173
        API_BASE_URL: http://localhost:8080/api
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: test-results/playwright-report/
        retention-days: 30

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: npm run test:performance
    
    - name: Build application
      run: npm run build
    
    - name: Run Lighthouse CI
      run: npm run lighthouse
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          test-results/performance-results.json
          .lighthouseci/
        retention-days: 30

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security tests
      run: npm run test:security
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
    
    - name: Run backend security audit
      run: composer audit
      working-directory: backend
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: test-results/security-results.json
        retention-days: 30

  # Generate Test Report
  test-report:
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate comprehensive test report
      run: npm run test:all
      env:
        CI: true
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: |
          test-results/test-report.html
          test-results/test-report.json
        retention-days: 90
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = JSON.parse(fs.readFileSync('test-results/test-report.json', 'utf8'));
            const { summary } = report;
            
            const comment = `
            ## 🧪 Test Results
            
            | Status | Tests | Passed | Failed | Coverage |
            |--------|-------|--------|--------|----------|
            | ${summary.allPassed ? '✅' : '❌'} | ${summary.totalTests} | ${summary.totalPassed} | ${summary.totalFailed} | ${summary.coverageAverage}% |
            
            ### Test Suites
            ${Object.entries(report.results).map(([suite, results]) => 
              `- ${results.failed === 0 ? '✅' : '❌'} **${suite}**: ${results.passed} passed, ${results.failed} failed`
            ).join('\n')}
            
            ${summary.allPassed ? 
              '🎉 All tests passed!' : 
              '⚠️ Some tests failed. Please check the detailed report for more information.'
            }
            
            [View detailed report](${context.payload.pull_request.head.sha}/test-results/test-report.html)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Failed to post test results:', error);
          }